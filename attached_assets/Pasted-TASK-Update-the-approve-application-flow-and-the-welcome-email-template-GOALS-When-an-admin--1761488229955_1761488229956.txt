TASK: Update the "approve application" flow and the welcome email template.

GOALS:
- When an admin approves an application, the server-side approve flow must:
  1. Create the auth user (if not exists) with a temporary password generated by the exact rule below.
  2. Insert a profile (profiles table) with id = auth user id.
  3. Create required accounts (accounts table) — default balance = 0.
  4. Create the card(s) with chosen `card_brand` (visa/mastercard/amex) and `card_category` (debit/credit) per application fields.
  5. Insert transactions only when appropriate and ensure transactions.user_id is the auth user id.
  6. Send the welcome email using bank info from the `bank_details` table (dynamically loaded).
  7. Do NOT rely on DB triggers — do all creation in the approve logic itself (service_role key).
  8. Do not include routing number, SWIFT or NMLS ID in the welcome email.

WELCOME EMAIL REQUIREMENTS:
- Subject: `Welcome to Oakline Bank — Your Account Has Been Approved`
- Use white background + blue header (#004aad), blue CTA buttons, Arial/Helvetica/sans-serif.
- Greeting must include user first and last name dynamically.
- Show account type and masked account number (****1234).
- Footer uses bank name and alias emails from `bank_details` table. Use `welcome@theoaklinebank.com` as the FROM/sender and `contact-us@theoaklinebank.com` as support email.
- Do NOT include routing/SWIFT/NMLS in the email.
- Email text must be professional — see example content below.

PASSWORD RULES (MUST implement exactly):
- Length: 10 characters
- First character: uppercase A–Z
- Remaining characters: at least 3 lowercase letters a–z, at least 3 digits 0–9, and exactly 1 special character that is either `#` OR `$` (no other special symbols).
- Example valid passwords: `Goodmoney11#` , `Everything451$`
- Provide server-side generator + server-side validator regex before creating the auth user. Never accept externally provided temp passwords without running the validator.

DATA SOURCING:
- Load bank name and alias emails from `public.bank_details` table (select one row).
- Sender: `welcome@theoaklinebank.com` (use from `bank_details.email_welcome`).
- Support email: `contact-us@theoaklinebank.com` (use from `bank_details.email_contact`).

ERROR HANDLING & SAFETY:
- Use Supabase service_role key on server to do all DB writes and auth.admin.createUser.
- If any step fails, roll back previously created resources where possible (delete created auth user if profile/account creation fails).
- Return clear errors to the admin UI (include supabase error code and message).

UI CHANGES:
- On the Approve Applications admin screen add two options when approving:
  1. Account number: `Automatic (system-generated)` or `Manual (admin enters account number)` — if manual ensure uniqueness check before creating account.
  2. Card brand & category drop-downs pulled from `applications.chosen_card_brand` and `applications.chosen_card_category` defaults; allow admin to change.
- After successful approval, display a success message and the created IDs (user id, account id, card id) in response.

EMAIL CONTENT (use this as the template — generate HTML styled with blue header #004aad and white page background):
- Subject: Welcome to Oakline Bank — Your Account Has Been Approved
- Greeting: Hello {first_name} {last_name},
- Intro: Welcome to Oakline Bank! Your account is now active and ready to use. We're pleased to have you and are committed to providing secure, modern banking.
- Login credentials:
  • Email: {user_email}
  • Temporary password: {tempPassword}  (generated by the server, plain text here; encourage immediate change)
- Account Info: {account_type} — ****{last4}
- Next steps: Sign in, change password, set up security questions, explore dashboard
- Footer: Bank name and support email taken from bank_details (no routing/SWIFT/NMLS)
- CTA button: "Sign in now" linking to NEXT_PUBLIC_SITE_URL + '/login' in environment variables.

Deliverables:
1. Server-side JS handler / API route that runs the full approve flow using `supabase-js` service_role (include the generator + validator).
2. HTML email template (inline CSS) that matches design requirements.
3. Small client UI additions: manual/auto account number option and card brand/category selection.
4. Unit tests or sanity checks: password validator test cases and DB uniqueness checks for account_number and card_number.

IMPLEMENTATION NOTES:
- Use the provided SQL schema for table/column names (accounts, profiles, cards, applications, bank_details, transactions).
- Ensure created card rows include `card_brand`/`card_category` values.
- All created accounts must have `balance = 0`.
- On success: set applications.application_status = 'approved', processed_at = now(), application.user_id = created user id, profiles.enrollment_completed = true.

If you need, I will paste the current approve-application API handler code and the supabase schema for you to update.